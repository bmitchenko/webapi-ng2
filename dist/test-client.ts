
// 
// This file is autogenerated. 
// See http://github.com/bmitchenko/webapp-ng2 for details. 
//

import { Injectable } from '@angular/core';
import { Http, ResponseContentType, URLSearchParams } from '@angular/http';
import { Observable } from 'rxjs';


@Injectable()
export class ApiClient {
    private _connection: ApiConnection;
    private _values: ValuesController;

    constructor(http: Http) {
        this._connection = new ApiConnection(http, '');
    }

    public get basePath(): string {
        return this._connection.basePath;
    }

    public set basePath(basePath: string) {
        this._connection.basePath = basePath;
    }

    public get values(): ValuesController {
        if (this._values == undefined) {
            this._values = new ValuesController(this._connection);
        }

        return this._values;
    }
}

export class ApiConnection {
    constructor(public http: Http, public basePath: string) {
    }

    public request<T>(pattern: string, method: string, routeParams?: any, body?: any): Promise<T> {
        let url = pattern;
        let search = new URLSearchParams();

        if (routeParams != undefined) {
            Object.getOwnPropertyNames(routeParams).forEach((paramName) => {
                if (url.indexOf(`{${paramName}}`) != -1) {
                    url = url.replace(`{${paramName}}`, routeParams[paramName]);
                }
                else {
                    this.addSearchParam(search, paramName, routeParams[paramName]);
                }
            });
        }

        let request = this.http.request(this.basePath + url, {
            body: body,
            method: method,
            responseType: ResponseContentType.Json,
            search: search
        });

        return request.map(x => x.json()).toPromise();
    }

    private addSearchParam(search: URLSearchParams, name: string, value: any): void {
        if (value instanceof Array) {
            value.forEach((v, i) => {
                this.addSearchParam(search, `${name}[${i}]`, v);
            });
        } else {
            if (value instanceof Date) {
                search.append(name, value.toUTCString());
            } else {
                if (value instanceof Object) {
                    Object.getOwnPropertyNames(value).forEach((propertyName) => {
                        this.addSearchParam(search, `${name}.${propertyName}`, value[propertyName]);
                    });
                }
                else {
                    search.append(name, value);
                }
            }
        }
    }
}

export class ValuesController {
    constructor(private _connection: ApiConnection) {
    }


    public getProfile(): Promise<UserProfile> {
        return this._connection.request('api/values', 'Get', undefined, undefined);
    }

    public resolveData(): Promise<Container<Property>> {
        return this._connection.request('api/values', 'Get', undefined, undefined);
    }

    public getContainer(filter: Filter): Promise<Container<Property>> {
        return this._connection.request('api/values', 'Get', { filter: filter }, undefined);
    }

    public get(filter: Filter): Promise<Property> {
        return this._connection.request('api/values', 'Get', { filter: filter }, undefined);
    }

}

export interface Profile {
    userName?: string;
    password?: string;
}

export interface UserProfile extends Profile {
    fullName?: string;
}

export interface Container<T> {
    model?: T;
}

export interface Property {
    id: number;
    customerId?: number;
    dealType: DealType;
    dealStatus: DealStatus;
    date: Date;
    price?: number;
    photos?: Array<string>;
}

export interface Filter {
    maxPrice: number;
}
export enum DealType {
    Sale = 0,
    Rent = 1
}

export enum DealStatus {
    Active = 0,
    Suspended = 1,
    Cancelled = 2,
    Done = 3
}
