
// 
// This file is autogenerated. 
// See http://github.com/bmitchenko/webapi-ng2 for details. 
//

import { Injectable } from '@angular/core';
import { Http, ResponseContentType, URLSearchParams } from '@angular/http';
import { Observable } from 'rxjs';


@Injectable()
export class ApiClient {
    private _connection: ApiConnection;
    private _demo: DemoController;

    constructor(http: Http) {
        this._connection = new ApiConnection(http, '');
    }

    public get basePath(): string {
        return this._connection.basePath;
    }

    public set basePath(basePath: string) {
        this._connection.basePath = basePath;
    }

    public get demo(): DemoController {
        if (this._demo == undefined) {
            this._demo = new DemoController(this._connection);
        }

        return this._demo;
    }
}

export class ApiConnection {
    constructor(public http: Http, public basePath: string) {
    }

    public request<T>(pattern: string, method: string, routeParams?: any, body?: any): Promise<T> {
        let url = pattern;
        let search = new URLSearchParams();

        if (routeParams != undefined) {
            Object.getOwnPropertyNames(routeParams).forEach((paramName) => {
                if (url.indexOf(`{${paramName}}`) != -1) {
                    url = url.replace(`{${paramName}}`, routeParams[paramName]);
                }
                else {
                    this.addSearchParam(search, paramName, routeParams[paramName]);
                }
            });
        }

        let request = this.http.request(this.basePath + url, {
            body: body,
            method: method,
            responseType: ResponseContentType.Json,
            search: search
        });

        return request.map(x => x.json()).toPromise();
    }

    private addSearchParam(search: URLSearchParams, name: string, value: any): void {
        if (value instanceof Array) {
            value.forEach((v, i) => {
                this.addSearchParam(search, `${name}[${i}]`, v);
            });
        } else {
            if (value instanceof Date) {
                search.append(name, value.toUTCString());
            } else {
                if (value instanceof Object) {
                    Object.getOwnPropertyNames(value).forEach((propertyName) => {
                        this.addSearchParam(search, `${name}.${propertyName}`, value[propertyName]);
                    });
                }
                else {
                    search.append(name, value);
                }
            }
        }
    }
}

export class DemoController {
    constructor(private _connection: ApiConnection) {
    }


    public getPrimitive(): Promise<number> {
        return this._connection.request('api/demo', 'GET', undefined, undefined);
    }

    public getPrimitives(): Promise<Primitives> {
        return this._connection.request('api/demo', 'GET', undefined, undefined);
    }

    public getClassBase(): Promise<ClassBase> {
        return this._connection.request('api/demo', 'GET', undefined, undefined);
    }

    public getClassDescendant(): Promise<ClassDescendant> {
        return this._connection.request('api/demo', 'GET', undefined, undefined);
    }

    public getGenericDescendant(): Promise<GenericDescendant> {
        return this._connection.request('api/demo', 'GET', undefined, undefined);
    }

    public getGeneric(): Promise<GenericDefinition<string>> {
        return this._connection.request('api/demo', 'GET', undefined, undefined);
    }

    public getParams(param1: number, param2: number, param3: string = 'Default'): Promise<string> {
        return this._connection.request('api/demo', 'GET', { param1: param1, param2: param2, param3: param3 }, undefined);
    }

    public getQuery(query: ClassBase): Promise<string> {
        return this._connection.request('api/demo', 'GET', { query: query }, undefined);
    }

    public postQuery(query: ClassBase): Promise<string> {
        return this._connection.request('api/demo', 'POST', undefined, query);
    }

}

export interface Primitives {
    int: number;
    intNullable?: number;
    string?: string;
    date: Date;
    dateNullable?: Date;
    decimal: number;
    decimalNullable?: number;
    boolean: boolean;
    booleanNullable?: boolean;
}

export interface ValueType {

}

export interface KeyValuePair<TKey, TValue> extends ValueType {
    key?: TKey;
    value?: TValue;
}

export interface ClassBase {
    int: number;
    intNullable?: number;
    string?: string;
    date: Date;
    dateNullable?: Date;
    list?: Array<string>;
    array?: Array<string>;
    dictionary?: Array<KeyValuePair<number, string>>;
}

export interface ClassDescendant extends ClassBase {
    decimal: number;
    decimalNullable?: number;
    boolean: boolean;
    booleanNullable?: boolean;
    enum: Enumerable;
    enumNullable?: Enumerable;
    enumArray?: Array<Enumerable>;
}

export interface GenericDefinition<T> {
    value?: T;
}

export interface GenericDescendant extends GenericDefinition<number> {
    anotherValue?: string;
}
export enum Enumerable {
    Value1 = 1,
    Value2 = 2,
    Value3 = 3,
    Value4 = 4,
    Value5 = 5
}
