
// 
// This file is autogenerated. 
// See http://github.com/bmitchenko/webapi-ng2 for details. 
//        


import { Injectable } from '@angular/core';
import { Http, ResponseContentType, URLSearchParams } from '@angular/http';
import { Observable } from 'rxjs';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';


@Injectable()
export class ApiOptions {
    public basePath: string = '/api';
    public loginUrl: string;
}

export abstract class BaseApi {
    constructor(public http: Http, public options: ApiOptions) {
    }

    protected request<T>(path: string, method: string, urlParams?: any, body?: any): Promise<T> {
        let url = path;
        let search = new URLSearchParams();

        if (urlParams != undefined) {
            Object.getOwnPropertyNames(urlParams).forEach((paramName) => {
                if (url.indexOf(`{${paramName}}`) != -1) {
                    url = url.replace(`{${paramName}}`, urlParams[paramName]);
                }
                else {
                    this.addSearchParam(search, paramName, urlParams[paramName]);
                }
            });
        }

        let request = this.http.request(this.options.basePath + url, {
            body: body,
            method: method,
            search: search
        });

        return request
            .map(x => {
                var contentType = x.headers.get("content-type");

                if (contentType && contentType.indexOf("application/json") !== -1) {
                    return x.json();
                }

                if (x.ok) {
                    return null;
                }

                return x.text();
            })
            .toPromise();
    }

    private addSearchParam(search: URLSearchParams, name: string, value: any): void {
        if (value instanceof Array) {
            value.forEach((v, i) => {
                this.addSearchParam(search, `${name}[${i}]`, v);
            });
        } else {
            if (value instanceof Date) {
                search.append(name, value.toUTCString());
            } else {
                if (value instanceof Object) {
                    Object.getOwnPropertyNames(value).forEach((propertyName) => {
                        this.addSearchParam(search, `${name}.${propertyName}`, value[propertyName]);
                    });
                }
                else {
                    search.append(name, value);
                }
            }
        }
    }
}


@Injectable()
export class CarApi extends BaseApi {
    /** Список автомобилей покупателя */
    public getList(): Promise<CarDto[]> {
        return this.request<CarDto[]>('/api/fo/Car/GetList', 'get');
    }

    public getById(carId: number): Promise<CarDto> {
        return this.request<CarDto>('/api/fo/Car/GetById', 'get', { carId: carId });
    }

    public add(car: CarDto): Promise<void> {
        return this.request<void>('/api/fo/Car/Add', 'post', {}, car);
    }

    public update(car: CarDto): Promise<void> {
        return this.request<void>('/api/fo/Car/Update', 'put', {}, car);
    }

    public delete(carId: number): Promise<void> {
        return this.request<void>('/api/fo/Car/Delete', 'delete', { carId: carId });
    }

}

@Injectable()
export class CatalogApi extends BaseApi {

    public getAllBrands(): Promise<CarBrandDto[]> {
        return this.request<CarBrandDto[]>('/api/fo/Catalog/GetAllBrands', 'get');
    }

    public getBrandByName(brandName: string): Promise<CarBrandDto[]> {
        return this.request<CarBrandDto[]>('/api/fo/Catalog/GetBrandByName', 'get', { brandName: brandName });
    }

    public getBrandById(id: number): Promise<CarBrandDto[]> {
        return this.request<CarBrandDto[]>('/api/fo/Catalog/GetBrandById', 'get', { id: id });
    }

    public getModels(): Promise<CarModelDto[]> {
        return this.request<CarModelDto[]>('/api/fo/Catalog/GetModels', 'get');
    }

    public getModelsByBrandId(brandId: number): Promise<CarModelDto[]> {
        return this.request<CarModelDto[]>('/api/fo/Catalog/GetModelsByBrandId', 'get', { brandId: brandId });
    }

    public getModelsByName(modelName: string): Promise<CarModelDto[]> {
        return this.request<CarModelDto[]>('/api/fo/Catalog/GetModelsByName', 'get', { modelName: modelName });
    }

    public getCarsByModelId(modelId: number): Promise<CarDto[]> {
        return this.request<CarDto[]>('/api/fo/Catalog/GetCarsByModelId', 'get', { modelId: modelId });
    }

    public getCarsByName(carName: string): Promise<CarDto[]> {
        return this.request<CarDto[]>('/api/fo/Catalog/GetCarsByName', 'get', { carName: carName });
    }

}

@Injectable()
export class CustomerApi extends BaseApi {
    /** Возвращает данные профиля пользователя */
    public get(): Promise<CustomerInfoDto> {
        return this.request<CustomerInfoDto>('/api/fo/Customer/Get', 'get');
    }
    /** Обновляет данные профиля пользователя */
    public update(): Promise<void> {
        return this.request<void>('/api/fo/Customer/Update', 'get');
    }

}

@Injectable()
export class FavRequestApi extends BaseApi {

    public getList(): Promise<ServiceRequestDto[]> {
        return this.request<ServiceRequestDto[]>('/api/fo/FavRequest/GetList', 'get');
    }

    public add(request: ServiceRequestDto): Promise<ServiceRequestDto> {
        return this.request<ServiceRequestDto>('/api/fo/FavRequest/Add', 'post', {}, request);
    }

    public delete(requestId: number): Promise<void> {
        return this.request<void>('/api/fo/FavRequest/Delete', 'delete', { requestId: requestId });
    }

}

@Injectable()
export class OrderApi extends BaseApi {
    /** Получает список активных запросов */
    public getActiveRequestList(): Promise<ServiceRequestDto[]> {
        return this.request<ServiceRequestDto[]>('/api/fo/Order/GetActiveRequestList', 'post');
    }
    /** Удаляет активный запрос по идентификатору */
    public deleteActiveRequest(requestId: number): Promise<void> {
        return this.request<void>('/api/fo/Order/DeleteActiveRequest', 'delete', { requestId: requestId });
    }
    /** Создаёт новый запрос услуг в автосервисе */
    public createServiceRequest(request: ServiceRequestDto): Promise<RepairShopSearchResulItemDto[]> {
        return this.request<RepairShopSearchResulItemDto[]>('/api/fo/Order/CreateServiceRequest', 'post', {}, request);
    }
    /** Осуществляет поиск автосервисов по существующему активному запросу */
    public findShopsByRequest(requestId: number): Promise<RepairShopSearchResulItemDto[]> {
        return this.request<RepairShopSearchResulItemDto[]>('/api/fo/Order/FindShopsByRequest', 'post', { requestId: requestId });
    }
    /** Фильтрует список найденных по услуге автосервисов */
    public filterShops(filter: ServiceRequestFilterDto): Promise<RepairShopSearchResulItemDto[]> {
        return this.request<RepairShopSearchResulItemDto[]>('/api/fo/Order/FilterShops', 'post', {}, filter);
    }
    /** Запрашивает статус активного визита */
    public getVisitStatus(visitId: number): Promise<VisitStatus> {
        return this.request<VisitStatus>('/api/fo/Order/GetVisitStatus', 'post', { visitId: visitId });
    }

    public performPayment(visitId: number, amount: number): Promise<void> {
        return this.request<void>('/api/fo/Order/PerformPayment', 'post', { visitId: visitId, amount: amount });
    }
    /** Получает список активных визитов */
    public getActiveVisitList(): Promise<ActiveVisitDto[]> {
        return this.request<ActiveVisitDto[]>('/api/fo/Order/GetActiveVisitList', 'post');
    }
    /** Получает историю визитов */
    public getVisitHistoryList(): Promise<ActiveVisitDto[]> {
        return this.request<ActiveVisitDto[]>('/api/fo/Order/GetVisitHistoryList', 'post');
    }
    /** Создаёт визит (для автосервисов c авто-подтверждением) */
    public createVisit(request: VisitInfoDto): Promise<ActiveVisitDto> {
        return this.request<ActiveVisitDto>('/api/fo/Order/CreateVisit', 'post', {}, request);
    }
    /** Создаёт запрос на визит в автосервис */
    public requestVisit(request: VisitRequestDto): Promise<ActiveVisitDto> {
        return this.request<ActiveVisitDto>('/api/fo/Order/RequestVisit', 'post', {}, request);
    }

}

@Injectable()
export class QuestionnaireApi extends BaseApi {
    /** Корневой список вопросов */
    public getRootQuestionList(): Promise<any[]> {
        return this.request<any[]>('/api/fo/Questionnaire/GetRootQuestionList', 'get');
    }

    public getQuestionByAnswer(answerId: number): Promise<ServiceChoiceQuestionDto> {
        return this.request<ServiceChoiceQuestionDto>('/api/fo/Questionnaire/GetQuestionByAnswer', 'get', { answerId: answerId });
    }

}

@Injectable()
export class ShopAmenityApi extends BaseApi {
    /** Получает список удоств */
    public getList(): Promise<RepairShopAmenityDto[]> {
        return this.request<RepairShopAmenityDto[]>('/api/fo/ShopAmenity/GetList', 'post');
    }
    /** Получает удобство по идентификатору */
    public getById(amenityId: number): Promise<RepairShopAmenityDto> {
        return this.request<RepairShopAmenityDto>('/api/fo/ShopAmenity/GetById', 'post', { amenityId: amenityId });
    }

}

export interface CarDto {
    id: number;
    modificationName?: string;
    modelName?: string;
    manufacturerName?: string;
    yearStart: number;
    yearEnd: number;
    milageKm: number;
}

export interface CarBrandDto {
    id: number;
    name?: string;
    logoPath?: string;
}

export interface CarModelDto {
    id: number;
    name?: string;
    brandId: number;
    yearStart: Date;
    yearEnd: Date;
}

export enum PayCardType {
    Unknown = 0,
    Master = 1,
    Visa = 2,
    Maestro = 3
}

export interface PayCardDto {
    id: number;
    name?: string;
    type: PayCardType;
}

export interface CustomerInfoDto {
    id: number;
    firstName?: string;
    secondName?: string;
    lastName?: string;
    email?: string;
    phone?: string;
    birthday?: string;
    carIdList?: number[];
    bonus?: string;
    cards?: PayCardDto[];
}

export interface LocationDto {
    lat: number;
    lon: number;
    address?: string;
}

export interface ServiceDto {
    id: number;
    name?: string;
    description?: string;
}

export enum SparePartType {
    Unknown = 0,
    Original = 1,
    Cross = 2
}

export interface ServiceDescriptionDto {
    service?: ServiceDto;
    comment?: string;
    sparePartType?: SparePartType;
}

export interface ServiceRequestFilterDto {
    serviceRequestId: number;
    minRating: number;
    distanceKmFrom: number;
    distanceKmTo: number;
    priceFrom: number;
    priceTo: number;
    amenityIdList?: number[];
}

export interface ServiceRequestDto {
    id: number;
    carId: number;
    customerId: number;
    location?: LocationDto;
    serviceList?: ServiceDescriptionDto[];
    filter?: ServiceRequestFilterDto;
}

export interface RepairShopPreviewDto {
    id: number;
    name?: string;
    address?: string;
    rating: number;
    location?: LocationDto;
    instantBooking: boolean;
    amenityIdList?: number[];
}

export interface RepairShopSearchResulItemDto {
    serviceRequestId: number;
    repairShop?: RepairShopPreviewDto;
    minPrice: number;
    priceDescription?: string;
}

export enum VisitStatus {
    Unknown = 0,
    WaitForApprove = 1,
    Approved = 2,
    NotApproved = 3,
    Booked = 4,
    CanceledByClient = 5,
    CanceledByShop = 6,
    Completed = 7
}

export enum Currency {
    Unknwown = 1,
    RUB = 2,
    USB = 3,
    EUR = 4
}

export interface ServicePrice {
    total: number;
    discount: number;
    currency: Currency;
}

export interface ServiceDescriptionWithPriceDto extends ServiceDescriptionDto {
    price?: ServicePrice;
}

export interface ActiveVisitDto {
    id: number;
    repairShopId: number;
    customerId: number;
    carId: number;
    visitTime?: string;
    status: VisitStatus;
    serviceList?: ServiceDescriptionWithPriceDto[];
    dateCreated: Date;
}

export interface VisitInfoDto {
    serviceRequestId: number;
    repairShopId: number;
    carId: number;
    visitTime?: string;
}

export interface VisitDateTimeDto {
    date?: string;
    time?: string;
}

export interface VisitRequestDto {
    serviceRequestId: number;
    repairShopId: number;
    carId: number;
    visitTimeOptions?: VisitDateTimeDto[];
}

export interface PriceInfo {
    min: number;
    max: number;
    hint?: string;
}

export interface ServiceChoiceAnswerDto {
    id: number;
    text?: string;
    hint?: string;
    questionId: number;
    nextQuestionId?: number;
    sparePartType: SparePartType;
    service?: ServiceDto;
    priceInfo?: PriceInfo;
}

export interface ServiceChoiceQuestionDto {
    id: number;
    text?: string;
    hint?: string;
    answers?: ServiceChoiceAnswerDto[];
}

export interface RepairShopAmenityDto {
    id: number;
    name?: string;
    description?: string;
    iconName?: string;
}